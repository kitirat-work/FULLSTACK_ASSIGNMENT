// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LoginCache is an autogenerated mock type for the LoginCache type
type LoginCache struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: userID
func (_m *LoginCache) AddUser(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCount provides a mock function with given fields: userID
func (_m *LoginCache) GetCount(userID string) int {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Increment provides a mock function with given fields: userID
func (_m *LoginCache) Increment(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitCacheReset provides a mock function with given fields:
func (_m *LoginCache) InitCacheReset() {
	_m.Called()
}

// IsExist provides a mock function with given fields: userID
func (_m *LoginCache) IsExist(userID string) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reset provides a mock function with given fields: userID
func (_m *LoginCache) Reset(userID string) {
	_m.Called(userID)
}

// ResetAfter1Minute provides a mock function with given fields: userID
func (_m *LoginCache) ResetAfter1Minute(userID string) {
	_m.Called(userID)
}

// NewLoginCache creates a new instance of LoginCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginCache {
	mock := &LoginCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
